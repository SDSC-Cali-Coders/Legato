automerger:
  stage: automerge
  image: mcr.microsoft.com/powershell:latest

# Only catching merge_requests missed "approval" events
  # only:
  #   - merge_requests

# Instead, used a webhook to catch "approval" events and trigger
# so only run if triggered via pipelines API
  rules:
    - if: $CI_PIPELINE_SOURCE == "trigger"
      when: always

# SECRET_TOKEN registered to proj (collab w/ PO Jacob)
# CI_MERGE_IID is only available on approval events - so will not have access to it
# > instead, webhook will forward the IID variable
# Testing if CI_JOB_ID can be used to access MERGE_IID if not
  variables:
    PRIVATE_TOKEN: $SECRET_TOKEN
    MERGE_IID: $MERGE_IID
    JOB_ID: $CI_JOB_ID

  script:
    - |
      echo "Attempting to use a docker img of unix pre-installed w/ pwsh for lighter pipelining"
      echo "Expecting a masked PRIVATE_TOKEN: $PRIVATE_TOKEN"
      echo "Expecting an integer MERGE_IID: $MERGE_IID"
      echo "Expecting an integer JOB_ID: $JOB_ID"

      echo

      pwsh -c 'Write-Host "If no errors, will continue by accessing from env now"'
      pwsh -c 'Write-Host "Expecting a masked PRIVATE_TOKEN: $env:PRIVATE_TOKEN"'
      pwsh -c 'Write-Host "Expecting an integer MERGE_IID: $env:MERGE_IID"'
      pwsh -c 'Write-Host "Expecting an integer JOB_ID: $env:JOB_ID"'

      echo

      echo "Now checking what data is available through JOB_ID"
      pwsh .gitlab/scripts/test.ps1
